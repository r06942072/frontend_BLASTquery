{"version":3,"sources":["actions/types.js","components/YourQuery/FastaTextbox/presentation.js","components/YourQuery/FastaUpload/presentation.js","components/YourQuery/index.js","components/OurDb/Searchbar/presentation.js","components/OurDb/OrganismList/presentation.js","components/OurDb/OrganismDetail/presentation.js","components/OurDb/index.js","actions/formAction.js","components/TimeTravel/Submit/presentation.js","components/TimeTravel/index.js","components/App/index.js","reducers/formReducer.js","reducers/index.js","store.js","index.js"],"names":["Actions","FastaTextbox","props","react_default","a","createElement","FastaUpload","type","value","Component","Searchbar","placeholder","onChange","handleSearchbarChange","OrganismList","finalShowlist","showList","map","array","key","id","checked","isChecked","name","fullName","handleCheckboxChange","isRenderAll","handleCheckboxAll","OrganismDetail","OurDb","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_handleSearchbarChange","event","setState","searchbarText","target","_handleCheckboxAll","newList","allList","forEach","res","setList","forceUpdate","_handleCheckboxChange","_isRenderAll","state","_renderShowList","filter","toLowerCase","includes","length","prevProps","prevState","Searchbar_presentation","OrganismList_presentation","OrganismDetail_presentation","data","mapDispatchToProps","dispatch","payload","connect","formState","Submit","action","TimeTravel","_handleSubmit","Submit_presentation","App","console","log","localStorage","getItem","fetchList","snapshot","components_OurDb","components_TimeTravel","initialState","whichProgram","formReducer","arguments","undefined","objectSpread","rootReducer","combineReducers","persistedState","JSON","parse","middleware","thunk","storeEnhancer","compose","applyMiddleware","apply","window","__REDUX_DEVTOOLS_EXTENSION__","store","createStore","subscribe","setItem","stringify","getState","ReactDOM","render","es","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.2c23e498.chunk.js","sourcesContent":["//SET: store data to store\r\n//FETCH: get data from remote url\r\nexport const Actions = {\r\n    FETCH_LIST: 'FETCH_LIST from remote url',\r\n    SET_LIST: 'SET_LIST, set organism list to redux store',\r\n};","import React from 'react';\r\n\r\nfunction FastaTextbox(props) {\r\n    return (\r\n        <div>\r\n            <p>*FastaTextBox</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FastaTextbox;","import React from 'react';\r\n\r\nfunction FastaUpload(props) {\r\n    return (\r\n        <div>\r\n            <input type=\"submit\" value=\"Choose File\" />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FastaUpload;","import React, { Component } from 'react';\r\nimport FastaTextbox from './FastaTextbox/presentation'\r\nimport FastaUpload from './FastaUpload/presentation'\r\n\r\nclass YourQuery extends Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\twindowWidth: 0,\r\n\t\t\twindowHeight: 0,\r\n\t\t\tfastaWidth: 0,\r\n\t\t\tfastaHeight: 0\r\n\t\t}\r\n\t}\r\n\tcomponentDidMount() {\r\n\r\n\t}\r\n\t/*\r\n\tcomponentDidUpdate(prevProps, prevState) {\r\n\t}\r\n\t*/\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h1>YourQuery</h1>\r\n\t\t\t\t<p>Enter sequence below in FASTA format:</p>\r\n\t\t\t\t<FastaTextbox\r\n\t\t\t\t\tdata={this.state}\r\n\t\t\t\t/>\r\n\t\t\t\t<p>Or load it from disk:</p>\r\n\t\t\t\t<FastaUpload\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default YourQuery;","import React from 'react';\r\n\r\nfunction Searchbar(props) {\r\n    return (\r\n        <div>\r\n            <p>*SearchBar</p>\r\n            <form>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Search...\"\r\n                    onChange={props.handleSearchbarChange}\r\n                />\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Searchbar;","import React from 'react';\r\n\r\nfunction OrganismList(props) {\r\n    let finalShowlist;\r\n    const showList = props.showList.map((array) =>\r\n        <li key={array.id}>\r\n            <input\r\n                key={array.id}\r\n                type=\"checkbox\"\r\n                checked={array.isChecked} //set initial value of checkbox based on props, either true or false\r\n                name={array.fullName}\r\n                onChange={props.handleCheckboxChange}\r\n            />\r\n            {array.fullName}\r\n        </li>\r\n    );\r\n    if (props.isRenderAll) {\r\n        finalShowlist =\r\n            <div>\r\n                <li>\r\n                    <input\r\n                        key=\"checkboxAll\"\r\n                        type=\"checkbox\"\r\n                        onChange={props.handleCheckboxAll}\r\n                    />Select all organisms\r\n                </li>\r\n                {showList}\r\n            </div>;\r\n    }\r\n    else {\r\n        finalShowlist = <div>{showList}</div>;\r\n    }\r\n    return (\r\n        <div>\r\n            <p>*OrganismList</p>\r\n            <ul>\r\n                {finalShowlist}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default OrganismList;","import React from 'react';\r\n\r\nfunction OrganismDetail(props) {\r\n    return (\r\n        <div>\r\n            <p>*OrganismDetail</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default OrganismDetail;","//OurDb\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    setList\r\n} from '../../actions/formAction';\r\n\r\nimport Searchbar from \"./Searchbar/presentation\";\r\nimport OrganismList from \"./OrganismList/presentation\";\r\nimport OrganismDetail from \"./OrganismDetail/presentation\";\r\n\r\nclass OurDb extends Component {\r\n    constructor(props) {\r\n        super(props); //this.props is now meaningful\r\n        this.state = {\r\n            searchbarText: \"\"\r\n        }\r\n    }\r\n    componentDidMount() {\r\n    }\r\n    componentDidUpdate(prevProps, prevState) {\r\n    }\r\n    _handleSearchbarChange = (event) => {\r\n        this.setState({\r\n            searchbarText: event.target.value\r\n        });\r\n    }\r\n    _handleCheckboxAll = (event) => {\r\n        let newList = this.props.allList;\r\n        newList.forEach((res) => {\r\n            res.isChecked = event.target.checked\r\n        });\r\n        this.props.setList(newList);\r\n        this.forceUpdate();\r\n    }\r\n    _handleCheckboxChange = (event) => {\r\n        let newList = this.props.allList;\r\n        newList.forEach((res) => {\r\n            if (res.fullName === event.target.name) {\r\n                res.isChecked = event.target.checked;\r\n            }\r\n        });\r\n        this.props.setList(newList);\r\n        this.forceUpdate();\r\n    }\r\n\t_isRenderAll = () => {\r\n\t\tconst searchbarText = this.state.searchbarText;\r\n\t\treturn (searchbarText === '') ? true : false;\r\n\t}\r\n    _renderShowList = () => {\r\n        //depend on searchbarText\r\n        const allList = this.props.allList;\r\n        const searchbarText = this.state.searchbarText;\r\n        if (searchbarText === '') {\r\n            return allList;\r\n        }\r\n        else {\r\n            const newList =\r\n                allList.filter(\r\n                    (res) => {\r\n                        if (res.fullName.toLowerCase().includes(\r\n                            searchbarText.toLowerCase())) {\r\n                            return true;\r\n                        }\r\n                        else {\r\n                            return false;\r\n                        }\r\n                    }\r\n                );\r\n            const notFound = { \"id\": 404, \"fullName\": \"Not found!!!\" }\r\n            return (newList.length !== 0) ? newList : [notFound];\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Searchbar\r\n                    handleSearchbarChange={this._handleSearchbarChange}\r\n                />\r\n                <OrganismList\r\n                    handleCheckboxAll={this._handleCheckboxAll}\r\n                    handleCheckboxChange={this._handleCheckboxChange}\r\n                    isRenderAll={this._isRenderAll()}\r\n                    showList={this._renderShowList()}\r\n                />\r\n                <OrganismDetail\r\n                    data={this.state}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    allList: state.formState.allList\r\n});\r\n\r\n//bundle actionCreators together\r\nconst mapDispatchToProps = {\r\n    setList\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(OurDb);","import { Actions } from './types';\r\n//import axios from \"axios\";\r\n\r\n//fetch data from remote url\r\nexport const fetchList = () => dispatch => {\r\n    dispatch({\r\n        type: Actions.FETCH_LIST,\r\n        payload: [\r\n            { \"id\": 1, \"fullName\": \"Aethina tumdia\", \"isChecked\": false },\r\n            { \"id\": 2, \"fullName\": \"Bombus terrestis\", \"isChecked\": false },\r\n            { \"id\": 3, \"fullName\": \"Hyalella azteca\", \"isChecked\": false }\r\n        ]\r\n    })\r\n}\r\nexport const setList = (res) => dispatch => {\r\n    dispatch({\r\n        type: Actions.SET_LIST,\r\n        payload: res\r\n    })\r\n}","import React from 'react';\n\nfunction Submit(props) {\n    return (\n        <div>\n            <p>*Submit</p>\n            <form action=\"/12345\">\n                <input type=\"submit\" value=\"Submit Form\" />\n            </form>\n        </div>\n    );\n}\n\nexport default Submit;","//TimeTravel\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Submit from \"./Submit/presentation\";\n\nclass TimeTravel extends Component {\n    componentDidMount() {\n    }\n    _handleSubmit = () => {\n    }\n    render() {\n        return (\n            <div>\n                <Submit\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({  \n});\n\nconst mapDispatchToProps = {\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TimeTravel);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n\tfetchList\r\n} from '../../actions/formAction';\r\n\r\nimport YourQuery from '../YourQuery';\r\nimport OurDb from '../OurDb';\r\n//import Program from '../Program';\r\nimport TimeTravel from '../TimeTravel';\r\n\r\nclass App extends Component {\r\n\tcomponentDidMount() {\r\n\t\tconsole.log('App componentDidMount');\r\n\t\tif (localStorage.getItem('reduxState') === null) {\r\n\t\t\tthis.props.fetchList();\r\n\t\t}\r\n\t}\r\n\tcomponentDidUpdate(prevProps, prevState, snapshot) {\r\n\t\tconsole.log('App componentDidUpdate');\r\n\t}\r\n\trender() {\r\n\t\tconsole.log('App render');\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h1>YourQuery</h1>\r\n\t\t\t\t<br />\r\n\t\t\t\t<p>----------------------------------------</p>\r\n\t\t\t\t<h1>OurDb</h1>\r\n\t\t\t\t<OurDb />\r\n\t\t\t\t<br />\r\n\t\t\t\t<p>----------------------------------------</p>\r\n\t\t\t\t<h1>Program</h1>\r\n\t\t\t\t<p>----------------------------------------</p>\r\n\t\t\t\t<h1>TimeTravel</h1>\r\n\t\t\t\t<TimeTravel />\r\n\t\t\t\t<p>----------------------------------------</p>\r\n\t\t\t\t<br />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n/*\r\nApp.propTypes = {\r\n\tallList: PropTypes.array.isRequired\r\n}\r\n*/\r\nconst mapStateToProps = (state) => ({\r\n\tallList: state.formState.allList\r\n});\r\n\r\n//bundle actionCreators together\r\nconst mapDispatchToProps = {\r\n\tfetchList\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n\r\n/*\r\nWe connect this react component App to redux store\r\nWe get both data and function by ```connect(data, function)```\r\nIt has this.props\r\n*/","import { Actions } from '../actions/types';\r\n\r\nconst initialState = {\r\n    allList: [\r\n        { \"id\": 11, \"fullName\": \"PleaseFetchDataFromRemote\", \"isChecked\": false },\r\n        { \"id\": 22, \"fullName\": \"reducer/formReducer.js\", \"isChecked\": false },\r\n        { \"id\": 33, \"fullName\": \"Chun-Hung\", \"isChecked\": false }\r\n    ],\r\n    whichProgram: 'blastn'\r\n};\r\n\r\nconst formReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case Actions.FETCH_LIST:\r\n            return {\r\n                ...state,\r\n                allList: action.payload\r\n            };\r\n        case Actions.SET_LIST:\r\n            return {\r\n                ...state,\r\n                allList: action.payload\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default formReducer;","import { combineReducers } from 'redux';\r\nimport formReducer from './formReducer';\r\n\r\n//const undoableReducer = undoable(formReducer);\r\n\r\nconst rootReducer = combineReducers({\r\n    formState: formReducer\r\n});\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nlet persistedState = {};\r\nif (localStorage.getItem('reduxState') !== null) {\r\n    persistedState = JSON.parse(localStorage.getItem('reduxState'));\r\n}\r\n\r\n//const persistedState = localStorage.getItem('reduxState') ? reduxStateFromLocalStorage :{};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst storeEnhancer = compose(\r\n    applyMiddleware(...middleware),\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    persistedState,\r\n    storeEnhancer\r\n);\r\n\r\nexport default store;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from './components/App';\r\n\r\nimport { Provider } from 'react-redux';\r\nimport store from './store';\r\n\r\n//listen the redux state change and update localStorage of browser synchronized\r\nstore.subscribe(() => {\r\n    //console.log(store.getState());\r\n    localStorage.setItem('reduxState', JSON.stringify(store.getState()));\r\n});\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}